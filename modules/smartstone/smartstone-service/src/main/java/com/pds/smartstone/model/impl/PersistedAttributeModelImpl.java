/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.pds.smartstone.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.pds.smartstone.model.PersistedAttribute;
import com.pds.smartstone.model.PersistedAttributeModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PersistedAttribute service. Represents a row in the &quot;Attribute&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PersistedAttributeModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PersistedAttributeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PersistedAttributeImpl
 * @generated
 */
public class PersistedAttributeModelImpl
	extends BaseModelImpl<PersistedAttribute>
	implements PersistedAttributeModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a persisted attribute model instance should use the <code>PersistedAttribute</code> interface instead.
	 */
	public static final String TABLE_NAME = "Attribute";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id", Types.BIGINT},
		{"typeId", Types.BIGINT}, {"value", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"languageId", Types.BIGINT},
		{"createdOn", Types.TIMESTAMP}, {"createdBy", Types.BIGINT},
		{"modifiedOn", Types.TIMESTAMP}, {"modifiedBy", Types.BIGINT},
		{"deletedOn", Types.TIMESTAMP}, {"deletedBy", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("typeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("value", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("languageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdOn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedOn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("deletedOn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("deletedBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Attribute (uuid_ VARCHAR(75) null,id LONG not null primary key,typeId LONG,value VARCHAR(75) null,description VARCHAR(75) null,languageId LONG,createdOn DATE null,createdBy LONG,modifiedOn DATE null,modifiedBy LONG,deletedOn DATE null,deletedBy LONG)";

	public static final String TABLE_SQL_DROP = "drop table Attribute";

	public static final String ORDER_BY_JPQL =
		" ORDER BY persistedAttribute.typeId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY Attribute.typeId ASC";

	public static final String DATA_SOURCE = "extDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ID_COLUMN_BITMASK = 1L;

	public static final long TYPEID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PersistedAttributeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PersistedAttribute.class;
	}

	@Override
	public String getModelClassName() {
		return PersistedAttribute.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PersistedAttribute, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PersistedAttribute, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersistedAttribute, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PersistedAttribute)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PersistedAttribute, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PersistedAttribute, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PersistedAttribute)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PersistedAttribute, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PersistedAttribute, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, PersistedAttribute>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			PersistedAttribute.class.getClassLoader(), PersistedAttribute.class,
			ModelWrapper.class);

		try {
			Constructor<PersistedAttribute> constructor =
				(Constructor<PersistedAttribute>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<PersistedAttribute, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PersistedAttribute, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PersistedAttribute, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<PersistedAttribute, Object>>();
		Map<String, BiConsumer<PersistedAttribute, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<PersistedAttribute, ?>>();

		attributeGetterFunctions.put("uuid", PersistedAttribute::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<PersistedAttribute, String>)
				PersistedAttribute::setUuid);
		attributeGetterFunctions.put("id", PersistedAttribute::getId);
		attributeSetterBiConsumers.put(
			"id",
			(BiConsumer<PersistedAttribute, Long>)PersistedAttribute::setId);
		attributeGetterFunctions.put("typeId", PersistedAttribute::getTypeId);
		attributeSetterBiConsumers.put(
			"typeId",
			(BiConsumer<PersistedAttribute, Long>)
				PersistedAttribute::setTypeId);
		attributeGetterFunctions.put("value", PersistedAttribute::getValue);
		attributeSetterBiConsumers.put(
			"value",
			(BiConsumer<PersistedAttribute, String>)
				PersistedAttribute::setValue);
		attributeGetterFunctions.put(
			"description", PersistedAttribute::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<PersistedAttribute, String>)
				PersistedAttribute::setDescription);
		attributeGetterFunctions.put(
			"languageId", PersistedAttribute::getLanguageId);
		attributeSetterBiConsumers.put(
			"languageId",
			(BiConsumer<PersistedAttribute, Long>)
				PersistedAttribute::setLanguageId);
		attributeGetterFunctions.put(
			"createdOn", PersistedAttribute::getCreatedOn);
		attributeSetterBiConsumers.put(
			"createdOn",
			(BiConsumer<PersistedAttribute, Date>)
				PersistedAttribute::setCreatedOn);
		attributeGetterFunctions.put(
			"createdBy", PersistedAttribute::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<PersistedAttribute, Long>)
				PersistedAttribute::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedOn", PersistedAttribute::getModifiedOn);
		attributeSetterBiConsumers.put(
			"modifiedOn",
			(BiConsumer<PersistedAttribute, Date>)
				PersistedAttribute::setModifiedOn);
		attributeGetterFunctions.put(
			"modifiedBy", PersistedAttribute::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<PersistedAttribute, Long>)
				PersistedAttribute::setModifiedBy);
		attributeGetterFunctions.put(
			"deletedOn", PersistedAttribute::getDeletedOn);
		attributeSetterBiConsumers.put(
			"deletedOn",
			(BiConsumer<PersistedAttribute, Date>)
				PersistedAttribute::setDeletedOn);
		attributeGetterFunctions.put(
			"deletedBy", PersistedAttribute::getDeletedBy);
		attributeSetterBiConsumers.put(
			"deletedBy",
			(BiConsumer<PersistedAttribute, Long>)
				PersistedAttribute::setDeletedBy);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask |= ID_COLUMN_BITMASK;

		if (!_setOriginalId) {
			_setOriginalId = true;

			_originalId = _id;
		}

		_id = id;
	}

	public long getOriginalId() {
		return _originalId;
	}

	@Override
	public long getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(long typeId) {
		_columnBitmask = -1L;

		if (!_setOriginalTypeId) {
			_setOriginalTypeId = true;

			_originalTypeId = _typeId;
		}

		_typeId = typeId;
	}

	public long getOriginalTypeId() {
		return _originalTypeId;
	}

	@Override
	public String getValue() {
		if (_value == null) {
			return "";
		}
		else {
			return _value;
		}
	}

	@Override
	public void setValue(String value) {
		_value = value;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public long getLanguageId() {
		return _languageId;
	}

	@Override
	public void setLanguageId(long languageId) {
		_languageId = languageId;
	}

	@Override
	public Date getCreatedOn() {
		return _createdOn;
	}

	@Override
	public void setCreatedOn(Date createdOn) {
		_createdOn = createdOn;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public Date getModifiedOn() {
		return _modifiedOn;
	}

	@Override
	public void setModifiedOn(Date modifiedOn) {
		_modifiedOn = modifiedOn;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getDeletedOn() {
		return _deletedOn;
	}

	@Override
	public void setDeletedOn(Date deletedOn) {
		_deletedOn = deletedOn;
	}

	@Override
	public long getDeletedBy() {
		return _deletedBy;
	}

	@Override
	public void setDeletedBy(long deletedBy) {
		_deletedBy = deletedBy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, PersistedAttribute.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PersistedAttribute toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PersistedAttribute>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PersistedAttributeImpl persistedAttributeImpl =
			new PersistedAttributeImpl();

		persistedAttributeImpl.setUuid(getUuid());
		persistedAttributeImpl.setId(getId());
		persistedAttributeImpl.setTypeId(getTypeId());
		persistedAttributeImpl.setValue(getValue());
		persistedAttributeImpl.setDescription(getDescription());
		persistedAttributeImpl.setLanguageId(getLanguageId());
		persistedAttributeImpl.setCreatedOn(getCreatedOn());
		persistedAttributeImpl.setCreatedBy(getCreatedBy());
		persistedAttributeImpl.setModifiedOn(getModifiedOn());
		persistedAttributeImpl.setModifiedBy(getModifiedBy());
		persistedAttributeImpl.setDeletedOn(getDeletedOn());
		persistedAttributeImpl.setDeletedBy(getDeletedBy());

		persistedAttributeImpl.resetOriginalValues();

		return persistedAttributeImpl;
	}

	@Override
	public int compareTo(PersistedAttribute persistedAttribute) {
		int value = 0;

		if (getTypeId() < persistedAttribute.getTypeId()) {
			value = -1;
		}
		else if (getTypeId() > persistedAttribute.getTypeId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PersistedAttribute)) {
			return false;
		}

		PersistedAttribute persistedAttribute = (PersistedAttribute)object;

		long primaryKey = persistedAttribute.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		PersistedAttributeModelImpl persistedAttributeModelImpl = this;

		persistedAttributeModelImpl._originalUuid =
			persistedAttributeModelImpl._uuid;

		persistedAttributeModelImpl._originalId =
			persistedAttributeModelImpl._id;

		persistedAttributeModelImpl._setOriginalId = false;

		persistedAttributeModelImpl._originalTypeId =
			persistedAttributeModelImpl._typeId;

		persistedAttributeModelImpl._setOriginalTypeId = false;

		persistedAttributeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PersistedAttribute> toCacheModel() {
		PersistedAttributeCacheModel persistedAttributeCacheModel =
			new PersistedAttributeCacheModel();

		persistedAttributeCacheModel.uuid = getUuid();

		String uuid = persistedAttributeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			persistedAttributeCacheModel.uuid = null;
		}

		persistedAttributeCacheModel.id = getId();

		persistedAttributeCacheModel.typeId = getTypeId();

		persistedAttributeCacheModel.value = getValue();

		String value = persistedAttributeCacheModel.value;

		if ((value != null) && (value.length() == 0)) {
			persistedAttributeCacheModel.value = null;
		}

		persistedAttributeCacheModel.description = getDescription();

		String description = persistedAttributeCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			persistedAttributeCacheModel.description = null;
		}

		persistedAttributeCacheModel.languageId = getLanguageId();

		Date createdOn = getCreatedOn();

		if (createdOn != null) {
			persistedAttributeCacheModel.createdOn = createdOn.getTime();
		}
		else {
			persistedAttributeCacheModel.createdOn = Long.MIN_VALUE;
		}

		persistedAttributeCacheModel.createdBy = getCreatedBy();

		Date modifiedOn = getModifiedOn();

		if (modifiedOn != null) {
			persistedAttributeCacheModel.modifiedOn = modifiedOn.getTime();
		}
		else {
			persistedAttributeCacheModel.modifiedOn = Long.MIN_VALUE;
		}

		persistedAttributeCacheModel.modifiedBy = getModifiedBy();

		Date deletedOn = getDeletedOn();

		if (deletedOn != null) {
			persistedAttributeCacheModel.deletedOn = deletedOn.getTime();
		}
		else {
			persistedAttributeCacheModel.deletedOn = Long.MIN_VALUE;
		}

		persistedAttributeCacheModel.deletedBy = getDeletedBy();

		return persistedAttributeCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PersistedAttribute, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PersistedAttribute, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersistedAttribute, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((PersistedAttribute)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<PersistedAttribute, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<PersistedAttribute, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersistedAttribute, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((PersistedAttribute)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PersistedAttribute>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _id;
	private long _originalId;
	private boolean _setOriginalId;
	private long _typeId;
	private long _originalTypeId;
	private boolean _setOriginalTypeId;
	private String _value;
	private String _description;
	private long _languageId;
	private Date _createdOn;
	private long _createdBy;
	private Date _modifiedOn;
	private long _modifiedBy;
	private Date _deletedOn;
	private long _deletedBy;
	private long _columnBitmask;
	private PersistedAttribute _escapedModel;

}